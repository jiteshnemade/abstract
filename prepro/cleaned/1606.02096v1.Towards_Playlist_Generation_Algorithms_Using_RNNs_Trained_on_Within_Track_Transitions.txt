introduction    in music recommendation  the quality of transitions  become important particularly when the recommendation  is provided in the form of a playlist. this is due to a unique  aspect of music consumption. unlike other products  music  is consumed i  instantaneously  for instance  while listening  using streaming services  ii  repeatedly  i.e.  listeners are  willing to listen to the same music multiple times  and  iii  quickly  i.e.  an item usually only lasts a few minutes.   this work was part funded by the  fusing audio  and semantic technologies for intelligent music production and consumption   fast impact  epsrc grant  ep l         and the european commission h     research and innovation grant audiocommons         . sandler acknowledges the support of the royal society as a recipient of a wolfson research merit award.    workshop on surprise  opposition  and obstruction in adaptive and personalized systems  soap  june              halifax  ns  canada  acm isbn                  .  doi    .             m.sandler qmul.ac.uk    hence  recommended items are typically consumed or played  in a sequence. this behaviour introduces the need for  good transitions between items  that is  the relevance and  subjective judgement a recommended track depends on the  previous track.  recommendation approaches using collaborative filtering  are prone to overlook niche or new items  although the  popularity bias of known items can be compensated for.  this is called the cold start problem     . content based  approaches which are designed to solve the cold start  problem can suffer from lack of diversity when recommended  items are selected simply by similarity. this is often  called top n recommendation.  it is well known that  unexpectedness  surprise or serendipity play an important  role in the music recommendation and discovery    .  compared to other strategies  focusing on transitions can  naturally provide these qualities.  there have been approaches that primarily focus on the  transitions of tracks                . they assumed the markov  property of hidden states or embeddings of tracks. using  the markov property  it is assumed that future events only  depend on the current one and does not depend on the past.  this has been successfully used for sequence modelling for  instance in speech      too. in music computing  playlist  datasets                 collaboratively created for reference  by djs and listeners were used for training and evaluation  of sequence modelling approaches. although these datasets  consist of a large number of tracks  e.g.    k playlists in        the lack of audio data fundamentally limits research  based on audio content analysis.  recently  recurrent neural networks  rnns  have become  widely used for sequence modelling in tasks such as speech  recognition  substantially outperforming previous hidden  markov model based approaches     . the success of the  application of rnns largely relies on the introduction of  long short term memory  lstm  units     . the merit of  lstm comes from the gate cells of lstm units  that decide  how much the units take input  release output  and forget  the previous events. especially  the forget gate improves  the training efficiency by helping the gradients flow well.  however  rnns have not been used for playlists generation  and modelling  due in part to the lack of sufficient training  data. to solve this problem  we propose using an rnn  trained on within track transitions to model playlists.  we assume that transitions between structural segments  of music can be used as a model for generating the  desired high quality transitions between tracks. in general   segments in a track are different but coherent and their     such as the weights of the last hidden layer of a neural  network classifier     . using explicit labels such as genre can  facilitate explaining the behaviour of the algorithm  which  is important for research and also to the listener.  in the experiment  an auto tagging algorithm in     is  used to predict a    dimensional vector whose elements  correspond to the probability of each tag. the tagging  algorithm is based on deep convolutional neural networks  and trained on million song dataset    . it shows state ofthe art performance while the tags cover variety of categories  such as genre  emotion  instrument  and era. although some  of the tags such as genre typically characterise the entire  music track  they are not necessarily constant over the whole  track.  figure     a block diagram of the proposed  algorithm   a b  training of rnn and  c  prediction  of a feature vector  xpred .    musical features can be expected to match well in succession.  this is due to the careful and intentional design by the  composer. using this approach  the number of transitions  can easily outnumber that of existing playlist datasets  and  therefore it enables to train an rnn model.  the rest of the paper is organised as follows. the  proposed method is first described in section  . we then  present experimental results and discussion in section   and  conclude in section  .     .    the proposed model    figure   illustrates the procedure of dataset construction   as well as the training and prediction stages of the proposed  algorithm. first  the training tracks are segmented and xi    the features for each segments are extracted  fig.  a . then  an rnn of length n  n    in the figure  is trained to learn  the transitions of the sequence of feature vectors  fig.  b .  when a seed track is provided  the features of the last n  segments are extracted and fed into the trained rnn to  predict the feature vector xpred  fig.  c . the algorithm  selects a track with a start segment that is most similar to  xpred .     .     rnn model    the goal of rnn training is to predict the feature of  the following track  xpred   that maintains consistency and  fluctuations  i.e.  a certain variation over the features. to  this end  a   layer rnn with     hidden units is employed.  lstm units      are used as they show state of the art  performance among rnn variants for several sequence  modelling tasks     .     .     similarity measure    a similarity measure is necessary to find the subsequent  track using the feature vector predicted by the rnn.  the similarity metric directly affects the properties of the  generated playlists and therefore it should be carefully  selected. using the cosine distance may compensate for  the popularity bias and result in recommending more niche  items     . the discounted cumulative gain  dcg  turned  out to be effective in our experiment.  dcg is a weighted version of cumulative gain  cg . cg  is designed to measure ranking quality of a retrieved list and  dcg weights on the top n relevant items by discounting  lower relevant items. applying this measure was motivated  by the type of feature extraction algorithm we use. the  extracted feature is a vector of probabilities of each tag  and tags with large probabilities should be weighted more  than the others to facilitate maintaining the consistency of  the generated playlists. because dcg weights high ranking  elements more  it can theoretically work better.     .    results and discussion    structural segmentation    structural segmentation is a task aiming to find the  boundaries of different segments or parts in music  e.g. intro   verse  bridge  chorus. the most common approach is to take  advantage of self similarity between frames of the track    .  in the experiment  we used a basic and efficient method  that is proposed in    . although the results introduce some  errors  the feature vector sequences that are based on the  imperfect segmentation still approximate the information  about how each feature changes along time in each track.     .      .     feature extraction    the proposed algorithm can use feature extraction  methods that are relevant to listeners  musical preferences  and able to represent a musical segment. this includes  estimated latent features from collaborative filtering        tags such as genre and emotion     or implicit features     .     configurations    for training  we used a private dataset with         commercial tracks of modern popular music including rock   hip hop  and jazz. we used       tracks from the ilm  k  dataset for testing         .  the segmentation is performed using      which is  implemented in     . as mentioned in section    an  automatic tagging algorithm was used as a feature extractor     . an rnn with a length of    is trained. we compared  dcg with the cosine distance and the l  norm for computing  similarity. audio processing and rnn are implemented  using librosa       keras      and theano     .  figure   shows the transitions of feature vectors in three  playlists given the same seed track but different similarity  metrics. the seed track is represented by a   by    matrix   i.e.    segments of the track. white horizontal lines indicate      a  cosine     b  l      c  dcg    seed  xpred     track   xpred     track   xpred     track   xpred     track     time    time    time     .      .     features    features    features     .     figure    transitions of feature vectors by cosine  distance  l    and dcg on left  centre  and right   respectively. y axis is time  top to bottom  and  x axis refers to the    feature dimensions. the first  track  topmost feature vectors  is the seed.    beginnings and ends of each track. the predicted feature  vectors    by     are illustrated in between.  the figure helps to explain several aspects of qualitative  observations by the authors while listening to the generated  playlists.     .     discussions    first  we found both consistency and fluctuations in the  extracted features within tracks. in general  several features  show consistently large  blue  and small  red  values  while  the other features vary. it supports the selection of feature  extraction algorithm.  however  there are still rooms for further improvements.  for example  whitening of each feature dimension can  be adopted to compensate the prior distributions of each  feature.  although rnns are able to adapt to such  differences  the similarity measure may be affected from such  pre processing.  second  the transitions usually successfully keep the  coherence within playlists as demonstrated by the figure.  however  we noticed that the model is prone to missing  overall similarity in long playlists. it may be related to the  observation that the trained rnn occasionally predicts a  vector that does not have near neighbours. it means the  selected track is not similar enough to the predicted vector   which may result in an undesirable or suboptimal transition.  this may first be due to the short lengths of segments  in the training data. the majority of training tracks have  fewer segments      of the training tracks has less than     segments   therefore the long term dependency may not be  learnt and the prediction may be dominated by short term  features.  in future work  training with longer sequences such as  concatenated features of tracks from sequences in an albums   setlists or curated playlists may be used to help learning  better transitions. it can be also a typical behaviour of  rnns. although rnns generally model the long term    dependency of sequences  in many cases  rnns have shown  a behaviour puts more emphasis on recent inputs rather than  older ones.  however  the problem seems to be partly resolved when  dcg is used as the similarity measure as discussed alongside  out last set of observations.  third  dcg provides more coherent playlists compared  to the cosine distance and l   norm. this phenomenon is  found not only in the sequences corresponding to figure    but also in other playlists. this can be explained  as follows. in each track  there are consistently strong   consistently weak  and fluctuating features. this pattern   especially the consistencies  can be easily learned by the  rnn and the consistent features are maintained in the  predictions. finally  dcg prioritises the features that are  large in predictions  resulting in successfully finding a track  with those consistently large features. this improves the  coherence of the resulting playlists.     .    conclusion    in this paper  we proposed a novel algorithm for playlist  generation that relies on learning desirable musical qualities  from within track transitions between musical segments.  the proposed combination of an rnn  within track  structure and dcg showed an encouraging result. withintrack structures showed the consistency and dynamics that  are assumed in playlists. an rnn model learnt the feature  sequences and its predictions are successfully used for the  selections of following tracks. different similarity measures  resulted in different playlists.  future work will investigate advanced architectures such  as bidirectional rnns      and more formal assessments.  using bidirectional rnns can be used to create playlists  that have more constraints e.g. start and end tracks     and  steerability     . formal assessments will include subjective  measurement e.g. satisfaction and objective measures with  regards to consistency  fluctuations and diversity.     .    