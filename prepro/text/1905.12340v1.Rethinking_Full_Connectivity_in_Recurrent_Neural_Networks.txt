arXiv:1905.12340v1 [cs.LG] 29 May 2019

Rethinking Full Connectivity in Recurrent Neural
Networks
Matthijs Van Keirsbilck
NVIDIA
Berlin, Germany
matthijsv@nvidia.com

Alexander Keller
NVIDIA
Berlin, Germany
akeller@nvidia.com

Xiaodong Yang
NVIDIA
Santa Clara, US
xiaodongy@nvidia.com

Abstract
Recurrent neural networks (RNNs) are omnipresent in sequence modeling tasks.
Practical models usually consist of several layers of hundreds or thousands of
neurons which are fully connected. This places a heavy computational and memory
burden on hardware, restricting adoption in practical low-cost and low-power
devices. Compared to fully convolutional models, the costly sequential operation
of RNNs severely hinders performance on parallel hardware. This paper challenges
the convention of full connectivity in RNNs. We study structurally sparse RNNs,
showing that they are well suited for acceleration on parallel hardware, with a
greatly reduced cost of the recurrent operations as well as orders of magnitude
less recurrent weights. Extensive experiments on challenging tasks ranging from
language modeling and speech recognition to video action recognition reveal that
structurally sparse RNNs achieve competitive performance as compared to fullyconnected networks. This allows for using large sparse RNNs for a wide range of
real-world tasks that previously were too costly with fully connected networks.

1

Introduction

Fully connected neural networks are known to have many redundant weights [13, 27, 28], which
makes training challenging and inference costly. There is an need for increasingly large networks [7],
but the compute and memory cost increases quadratically with network size if fully connected, which
makes the cost of increasing network size prohibitive.
Large RNNs are increasingly being replaced by convolutional sequence-to-sequence networks because
of the RNN’s huge number of trainable weights. This causes overfitting and training instability, and
limits the potential of parallellization [3, 10]. Techniques like pruning or factorization have been
proposed to reduce the inference cost of these networks but often increase the training time and
complexity and introduce additional hyperparameters. In addition, achieving real-world speedups
remains difficult.
In contrast to fully-connected RNNs, neurons in the human brain and other real-world resourceconstrained systems are not fully connected at all, with the majority of the connections being local
[6, 27, 38]. We review structurally sparse, locally recurrent neural network architectures, and discuss
implications for hardware acceleration.
Compared to unstructured sparsity, for example by pruning, structural sparsity also reduces the
number of weights and computations, but it does so in a way much more suitable for parallel
hardware acceleration. The sparse recurrent connections provide the additional advantage of reduced
communication between neurons, enabling more parallelism. In addition, learning about ways to
simplify the network architecture grants insight into the functioning of these networks.
Preprint. Under review.

2

Related Work

It has been shown that a large sparse network performs better than a small dense network [15, 18, 28].
Han et al. [14] combined iterative pruning-retraining, quantization and encoding to achieve 50×
model compression on AlexNet. Achieving real-world speedups remains difficult, as the technique
results in unstructured sparsity and irregular memory access patterns.
Structured pruning modifies the loss function to create more hardware-friendly memory access
patterns, resulting in block-sparse weight matrices, for example. Narang et al. [28] achieved the
same performance as a full LSTM using 10 times less weights and a similar speedup. An alternative
approach is to factorize the weight matrices [20, 29]. Both techniques are effective for improving
speed on current hardware, but offer little architectural insight into the reasons the resulting sparse
networks are so good. In addition, training is still fairly complex and expensive, which limits the
practical use of large networks.

Self-Connected Recurrent Neural Networks. The sequential modeling capabilities of RNNs
stem from the feedback connections. The most direct feedback connections are self-connections
of neurons through which neurons can access information about their own past. This idea leads to
the DiagonalRNN architecture, where neurons only have self-connections, and the recurrent weight
matrix is a diagonal matrix (in fact, simply a vector).
DiagonalRNNs have been used successfully in systems control since the ’90s [17, 19, 31]. There
are no recurrent connections between neurons in the same layer except for self-connections. This
reduces the recurrent transformation to an O(n) element-wise vector-vector multiplication instead of
an O(n2 ) matrix-vector multiplication. The number of recurrent weights is reduced correspondingly.
Different variations of this architecture have been studied, varying the location of the feedback
and the type of recurrence transformation (in general this feedback can be considered an IIR filter
[2]). Alternatively, FIR-type recurrences are possible, which are closely related to convolutional
sequence-to-sequence models (Van Den Oord et al. [36]). Tsoi and Back [35] provide an overview.
The DiagonalRNN idea was recently rediscovered and applied to LSTMs and GRUs by Subakan
and Smaragdis [33]. It was also explored by Li et al. [22] for deep vanilla RNN networks with
skip connections between them. Both articles show performance similar to fully connected LSTMs,
however, at much lower cost. Mikolov et al. [26] use the DiagonalRNN with fixed recurrent weights
close to unity as contextual units in addition to a fully-connected vanilla RNN, obtaining performance
close to LSTMs yet with a much simpler architecture.
One disadvantage of DiagonalRNN is that neurons can no longer see the hidden states of other
neurons in the same layer, placing constraints on the model’s temporal dynamics. However, even
with this constraint the models perform well on many challenging tasks as shown in our experiments.

Locally Recurrent Neural Networks. To combine the advantages of parallelism, structured memory access patterns, linear relation between number of neurons and the computational cost and
memory footprint, as well as the temporal modeling capacity of the fully-connected models, locally
connected networks are a promising alternative to self-recurrent networks. This approach is inspired
by both biological neural networks and other real-world networked systems, where each connection
incurs a cost. Such systems exhibit local connectivity and operate extremely well even under strict
connectivity constraints [6].
Chan and Young [5] propose locally connected RNNs: Within one layer each neuron is only connected
to itself and a few neighbours instead of connecting to all other neurons or only to itself (see Figure 1b).
This allows for greater temporal modeling capability, while reducing the size of the hidden weight
matrix from N × N to N × C, with C the number of connections per neuron being much smaller
than N . By varying the number of neighbours a neuron is connected to, a trade-off between the
complexity of temporal dynamics and the computational complexity can be achieved.
The limited local connectivity also allows for better control of network stability during training,
which is a challenge with fully connected RNNs. The constraint imposed by local connectivity can
act as a regularizer, making learning easier and reducing overfitting [31].
2

A network with local recurrent connections only results in a band-diagonal recurrent weight matrix
Wrec . There exist fast linear algebra routines for computing banded matrix-vector products, so this
recurrent transformation is straightforward to accelerate on current hardware.
A variant of the locally-connected RNN is the “grouped” RNN [8, 20, 42], where a single layer
is replaced by several smaller ones in parallel. Neurons are partitioned in several groups, with
full connectivity within each group. Groups are not connected to each other, but their outputs are
concatenated when passed to the next layer. This can be seen as a generalization of DiagonalRNNs,
where the independent units are now groups of several neurons instead of single neurons. Interestingly,
this idea is also very similar to the idea of grouped convolutions, which is gaining traction in state-ofthe-art convolutional neural networks [41].
Gray et al. [11] introduced fast GPU kernels for computations with block-sparse matrices, and
demonstrated good performance of block-sparse and small-world RNNs on large-scale sentiment
analysis and speech recognition tasks.
Both Tao Lei and Artzi [34] and Bradbury et al. [4] propose alternative gated RNNs with a very
efficient element-wise recurrent transformation. The gates are computed based only on the current
input, so these operations can be easily executed in parallel across time steps. The recurrence is very
fast as compared to full matrix multiplications at every time step. In several tasks this architecture has
been shown to perform well, however the lack of a hidden state may limit the model capacity [25].

3

Structurally Sparse RNNs for Hardware Acceleration

As described in Section 2, there are a variety of RNN architectures that make use of local (as opposed
to global) connectivity. Table 1 lists an overview of the architectures, together with the complexity of
the recurrent weight matrix. Figure 1 shows the connectivity patterns, while Figure 2 shows a visual
representation of these sparse weight matrices.
In unstructured sparse networks (see Figure 2b), non-zero weights are spread far apart in an irregular
pattern with lots of zeros in between. When loading the weight matrices from memory, these zeros
have to be loaded as well, and cause higher latency as well as high energy consumption [13].
The structurally sparse matrices of GroupRNN/BandRNN/DiagonalRNN have large advantages with
regards to memory access patterns, as their non-zero weights are all located close together in memory.
In addition, there are some straightforward parallellization opportunities. The following paragraphs
provide an overview of the benefits for hardware acceleration of various RNN architectures.
Full RNN: in a standard fully-connected recurrent neural network all neurons have recurrent connections to all other neurons. The connectivity pattern is visualized in Figure 1a, and the
recurrent weight matrix in Figure 2a. There is no opportunity for parallellization across
neurons, and the recurrent transformation requires a full matrix multiplication.
GroupRNN: here, neurons are divided in G groups, with full connectivity within each group, but no
connections between groups. The recurrent weight matrix structure is shown in Figure 2c.
This allows for complex temporal dynamics and specialization across groups, while the
recurrent computation is much reduced due to the lower number of weights. Each neuron
group operates independently of the other groups in the same layer, so there is an opportunity
for parallellization as well.
BandRNN: this is a locally connected RNN, where neurons have self-connections in addition to
connections to their immediate neighbours. This creates a sparse band-diagonal recurrent
weight matrix, which can be exploited for efficient computation. There is a linear relation
between the number of recurrent weights and the number of neurons. The recurrent weight
matrix is shown in Figure 2d and Figure 2e for several band widths. The connectivity pattern
is visualized in Figure 1b.
DiagonalRNN: this is an extreme form of BandRNN with zero connections to neighbours, or
GroupRNN with G = Nh . This means every neuron is completely independent of the other
neurons in the same layer, and can be computed in parallel. There are only Nh recurrent
weights, and the recurrent transformation consists of elementwise operations only. The
connectivity pattern is visualized in Figure 1c.

3

Table 1: The number of recurrent weights Nrec for a layer of Nh neurons, depending on the network
connectivity. The number of recurrent weights for DiagonalRNN and BandRNN is linear in the
number of neurons instead of quadratic
RNN Cell type # Recurrent Weights
Nh · Nh
Nh · Nh /G
Nh
Nh · C

Full RNN
GroupRNN
DiagonalRNN
BandRNN

6
6

5
6

5

7
7

7

4

8
8

8

9

3

2

2

9

0
0

4

3

3

9

5

4

2

1

1

0

(b) BandRNN: connections
(a) Full RNN: connections to
to some neighboring neurons
all neurons in the layer
plus self-connection

1

(c) DiagonalRNN:
self-connections only

Figure 1: Recurrent connectivity for various RNN types

10

20

30

0
Neuron incoming

0
Neuron incoming

Neuron incoming

0

10

20

30
0

10
20
Neuron outgoing

30

(a) Full RNN

30

0

30

10

20

30
0

10
20
Neuron outgoing

(d) BandRNN, C = 17

30

30

0
Neuron incoming

20

10
20
Neuron outgoing

(c) GroupRNN, G = 4

0
Neuron incoming

Neuron incoming

10
20
Neuron outgoing

(b) Sparse RNN

10

20

30
0

0

10

10

20

30
0

10
20
Neuron outgoing

(e) BandRNN, C = 7

30

0

10
20
Neuron outgoing

30

(f) DiagonalRNN, C = 1

Figure 2: Recurrent weight matrices for various RNN types. Grey indicates a nonzero weight, while
white indicates a zero weight (i.e. there’s no connection)

4

3.1

DiagonalRNNs: high speed and low memory footprint

Table 2 compares the speed and cost of full RNNs with DiagonalRNNs. DiagonalRNNs provide large
speedup opportunities through
1. vastly reduced computation in the (sequential) recurrent operation,
2. parallellization across neurons,
3. much lower memory footprint.

Table 2: Speed experiment in PyTorch, comparing cuDNN RNN, and DiagonalRNN with custom
CUDA kernel. DiagonalRNN does away with almost all of the recurrent weights, and achieves large
speedups of 9x at inference compared to Full RNN.
Model
Train time/batch Infer time/batch Model size # Recurrent
L = 1, Nh = 512
Weights
cuDNN RNN
CUDA DiagonalRNN

43 ms
23 ms

8.2 ms
0.9 ms

47.5 MB
25.1 MB

262.144
512

In DiagonalRNNs, the recurrent computation is much simpler, as it only requires elementwise
operations instead of full matrix multiplications. This is of great benefit as the recurrent transformation
is the sequential part of the RNN operation, and usually the performance bottleneck. Secondly, every
neuron in a layer is completely independent of every other neuron in that layer, so it’s possible to
parallelize across neurons. This creates an additional level of parallelism, making them very well
suited for execution on parallel hardware.
Due to the much lower cost of the sequential recurrent computation, plus the parallellization across
neurons, DiagonalRNNs are 9x faster than full RNN for inference.
In Deep Learning hardware accelerators, the cost of loading weights from memory accounts for a
large portion of the total energy cost [13]. With DiagonalRNNs, the storage cost for the recurrent
weights is O(Nh ) instead of O(Nh2 ), i.e. linear instead of quadratic in the number of neurons.
This brings the number of recurrent weights to almost zero compared to fully connected networks
(see Table 2. The much smaller memory footprint allows keeping the model weights fully in registers,
as proposed by Zhu et al. [43], which allows for further large increases in efficiency, reduced latency
and higher performance.
3.2

PreRNN with BandRNN

RNNs are widely applied to capture motion dynamics and to provide temporal contexts in video
understanding. Since the processing unit of a video is an image frame or a short video snippet, CNNs
pre-trained on large-scale image or video data sets are usually used as backbone networks, which
RNNs are then built upon [12, 39].
Instead of simply stacking a CNN and a full RNN and training the whole network from scratch,
PreRNN has recently been proposed in [40] to convert convolutional layers into recurrent layers.
PreRNN employs one or more pre-trained feedforward layers of a CNN as the input-to-hidden
transformations to the RNN and therefore avoids the default input-to-hidden transformation, which
uses a matrix multiplication with Nh × Ninputs weights of each gate. The only new weights
introduced by PreRNN are then the Nh × Nh hidden-to-hidden weights for each gate. [40] also
propose the ’PreRNN-SIH’ architecture to further simplify gating functions by binding all gates to
the same single input-to-hidden transformation. This technique allows for large weight savings, faster
training, and in many cases better performance.
PreRNN and BandRNN are highly complementary as the former significantly simplifies the inputto-hidden transformations and the latter largely reduces the hidden-to-hidden weights. Therefore,
the combination of PreRNN and BandRNN leads to a very efficient, high-performance video action
recognition model, as demonstrated in Section 4.
5

Table 3: PTB Language Modeling. DiagonalLSTM performs equivalently to full LSTM, while
requiring about 1000× less recurrent weights. BandLSTM improves on full LSTM, and requires
50× less recurrent weights.
Model
Test Perplexity
RNN Weights
L = 3, Nh = 1150
Full LSTM
GroupLSTM, G = 4
DiagonalLSTM, C = 1
BandLSTM, C = 23
BandLSTM, C = 105
BandLSTM, C = 460

4

(lower is better)
65.09
63.81
65.02
63.70
63.85
64.06

Total

Recurrent
7

2.02×10
1.17×107
8.98×106
9.21×106
1.01×107
1.30×107

1.12×107
2.80×106
1.08×104
2.43×105
1.11×106
4.05×106

Experiments

Networks are in the experiments are specified by the recurrent cell type (RNN or LSTM), the number
of layers Lh , and the number of neurons per layer: Nh . BandRNN networks are additionally specified
by the number of recurrent weights per neuron, C. For example: BandRNN, 1 × 512, C = 11 is an
RNN with 1 layer of 512 neurons, with 11 connections per neuron (1 self-connection, 5 to neighbours
on the left and 5 to neighbours on the right).
4.1

Language Modeling: PTB

PTB is a well-known language modeling data set [23]. We perform word-level language modeling
on the PTB data set, with a vocabulary size of 10000, embedding size of 512 and tied weights for
encoder/decoder, using the Adam optimizer and a learning rate of 0.001. The remaining training
setup is according to Merity et al. [24], using training code at 1 .
Table 3 shows the perplexity results for different models. DiagonalLSTM achieve test perplexity very
close to the fully connected LSTM, and both GroupLSTM and BandLSTM improve the perplexity.
When increasing the band, performance actually decreases, so it appears that limiting the recurrent
connectivity has a regularizing effect, which is especially important in the PTB benchmark.
4.2

Phoneme Recognition: TIMIT

TIMIT is a well-known speech recognition data set containing frame-level phonetic annotations
labeled by experts Garofolo et al. [9]. It contains 5.4 hours of audio data from 630 different speakers
of eight American English dialects, with rich and varied phonetic content [9].
For the task of phoneme recognition, the goal is to predict the sub-word phoneme corresponding to
every frame of audio. This is a more low-level task than speech recognition, and considering the small
size of the data set a good task for fast benchmarking of networks. We use 12 MFCC coefficients
plus energy with first and second derivatives for a total of 39 input features. Labels are the TIMIT
phoneme labels, collapsed to the reduced set of 39 phonemes proposed by Lee and Hon [21]. The
initial learning rate is 0.001, with a decay factor of 0.5 every time the accuracy doesn’t improve for 3
subsequent epochs. We use the Adam optimizer. Networks are trained for 25 epochs.
Table 4 shows an overview of the experiments. The sparse networks achieve encouraging results,
with DiagonalLSTM performing slightly worse than the full LSTM, but while requiring 500× less
recurrent weights. BandLSTM performs significantly better than the fully connected network, while
still requiring 5× less recurrent weights.
4.3

Speech Recognition: VCTK

VCTK is a standard speech recognition data set consisting of 44 hours of audio from 109 native
English speakers, reading sentences selected from a newspaper Veaux et al. [37]. It is a large-scale,
open vocabulary problem and a challenging task for speech recognition systems [37].
1

https://github.com/salesforce/awd-lstm-lm

6

Table 4: Phoneme recognition on TIMIT. Structurally sparse networks perform close to or better than
the fully connected network, while requiring much less weights.
Model
Test Accuracy
RNN Weights
L = 1, Nh = 512

(higher is better)

Total

Recurrent

78.3
77.6
78.8

1.13×106
8.19×104
2.81×105

1.05×106
2.05×103
2.11×105

Full LSTM
DiagonalLSTM
BandLSTM, C = 103

Table 5: Speech Recognition on VCTK. For the same number of neurons Full GRU outperforms
DiagonalGRU, but larger structurally sparse networks perform better with lower cost.
Model
Test CER
RNN Weights
(lower is better)
Full GRU 5 × 768
DiagonalGRU 5 × 768, C = 1
BandGRU 5 × 768, C = 103
DiagonalGRU 5 × 1100, C = 1
BandGRU 5 × 1000, C = 201

8.57
9.69
9.87
8.21
8.08

Total

Recurrent
7

3.82×10
2.06×107
2.39×107
3.81×107
3.80×107

1.77×107
4.61×104
3.41×106
6.60×104
5.76×106

Models are trained to perform character-level speech recognition. The network architecture and
training setup is very similar to Deepspeech2 (Amodei et al. [1]), consisting of 2 convolutional layers,
followed by 5 recurrent layers, with the CTC loss function. There is no language model used, and
greedy decoding is used. We use a 90-10 train/test split, selecting randomly. The optimizer is SGD
with a momentum of 0.9, with an initial learning rate of 0.005, decreasing by factor 0.9 every epoch,
and we train for 20 epochs. We use small tempo and gain for data augmentation. Training code is
based on 2 . Further details can be found there.
A comparison of the character error rate (CER) during training is shown in Figure 3. We observe that
the larger sparse networks converge faster and achieve lower errors than the fully connected network.
The results are shown in Table 5. DiagonalGRU and BandGRU perform worse than the full GRU by
a relatively significant margin. However, the number of recurrent weights in DiagonalGRU is almost
400x lower, in addition to the parallellization opportunity (see Section 3.1), so this is still a good
option for resource-constrained applications.
With more neurons in the locally connected networks, both BandGRU and DiagonalGRU outperform
Full GRU, while still having a much more efficient recurrent transformation and 200x less recurrent
weights for DiagonalGRU.
4.4

Video Action Recognition: UCF101

Another important category for sequential data analysis is the processing of videos. We use video
action recognition as a representative testbed to evaluate BandRNN and DiagonalRNN. Our experiment is performed on the public dataset UCF101 [32], which contains 101 action classes and 13,320
videos. We follow the two-stream method [30] to use two separate CNNs on the spatial (RGB) and
temporal (optical flow) streams. CNNs of each stream in our evaluations are combined with RNNs.
ResNet50 [16] pre-trained on ImageNet is used as the backbone CNN. Following PreRNN [40],
we transform the last conv layer of ResNet50 into a recurrent layer and then apply BandRNN and
DiagonalRNN. We use the standard experimental setting and report results on the first split.
Table 6 shows the video action recognition accuracy and number of recurrent weights of different
networks. DiagonalRNN and BandRNN coupled with PreRNN achieve comparable accuracy as full
PreRNN and perform better than traditional RNNs, while using over 10x less recurrent weights, in
particular for the combination of DiagonalRNN and PreRNN-SIH which requires about 100x less
recurrent weights and achieves the same accuracy.
2

https://github.com/SeanNaren/deepspeech.pytorch

7

CERresults

35.0
32.5
30.0
27.5
25.0
22.5
20.0
17.5
15.0
12.5
10.0
7.5
5.0
2.5
0.0

BandDiagonalGRU 5x768
BandDiagonalGRU 5x1000
FullGRU 5x768
DiagonalGRU 5x768
DiagonalGRU 5x1100

1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
Epoch

Figure 3: Character Error Rate (CER) on VCTK. Diagonal-GRU and Band-GRU perform worse than
full GRU, but allow larger network sizes for the same budget. These larger networks perform better.
Table 6: Comparison of video action recognition accuracy (%) and number of recurrent weights for
different recurrent networks on the UCF101 dataset.
Model Connectivity
Full RNN
DiagonalRNN
BandRNN, C = 21
BandRNN, C = 101
BandRNN, C = 201
Traditional RNN

5

PreLSTM

PreLSTM-SIH
7

93.2(2.02 × 10 )
92.7(3.38 × 106 )
92.8(3.54 × 106 )
92.9(4.19 × 106 )
93.2(4.98 × 106 )

7

93.5(1.70 × 10 )
92.6(2.23 × 105 )
93.0(3.87 × 105 )
92.7(1.03 × 106 )
93.5(1.82 × 106 )

LSTM: 92.5(2.02 × 107 )

PreGRU

PreGRU-SIH
7

93.7(1.49 × 10 )
92.8(2.32 × 106 )
92.8(2.45 × 106 )
92.8(2.93 × 106 )
92.9(3.52 × 106 )

93.3(1.28 × 107 )
92.5(2.19 × 105 )
92.5(3.42 × 105 )
92.3(8.26 × 105 )
92.6(1.42 × 106 )

GRU: 92.2(1.49 × 107 )

Discussion

Our experiments on the tasks of language modeling, speech and phoneme recognition, and action
recognition as well as work by other authors [8, 11, 18, 28] show that structurally sparse networks can
match and improve performance of fully connected networks, while reducing the cost significantly.
For the same number of neurons, sparse RNNs, especially DiagonalRNNs, are much more costeffective than fully connected RNNs. Alternatively, for the same parameter or compute budget sparse
RNNs can be larger, thereby increasing performance.
Future work could involve optimizing the elementwise recurrent computations, as well as integrating
DiagonalRNN with work by Zhu et al. [43] which stores weights fully on-chip to achieve even larger
speedups.

6

Conclusion

We presented a simple recurrent architecture with high degrees of structured sparsity in the recurrent
weight matrix, allowing for large speedups and model size reduction during both training and
inference. The models were evaluated on several challenging sequence modeling tasks, and the
structurally sparse networks were found to perform as well or better than fully-connected networks in
several tasks.
DiagonalRNNs provide straightforward parallellization opportunities, and reduce the cost of the
recurrent transformation by a large factor, removing the sequential bottleneck which limits speed of
fully connected RNNs on parallel hardware, and greatly reduce the network’s memory footprint.
These results are extremely encouraging for further research and practical adoption of structural
sparsity in real-world applications, opening the way both to ever-larger neural network sizes and to
adoption of high-performance RNNs on low-power and low-cost devices.
8

References
[1] Dario Amodei, Sundaram Ananthanarayanan, Rishita Anubhai, Jingliang Bai, Eric Battenberg,
Carl Case, Jared Casper, Bryan Catanzaro, Qiang Cheng, Guoliang Chen, et al. Deep speech
2: End-to-end speech recognition in english and mandarin. In International conference on
machine learning, pages 173–182, 2016.
[2] Andrew D Back and Ah Chung Tsoi. Fir and iir synapses, a new neural network architecture
for time series modeling. Neural Computation, 3(3):375–385, 1991.
[3] Shaojie Bai, J. Zico Kolter, and Vladlen Koltun. An empirical evaluation of generic convolutional and recurrent networks for sequence modeling. CoRR, abs/1803.01271, 2018. URL
http://arxiv.org/abs/1803.01271.
[4] James Bradbury, Stephen Merity, Caiming Xiong, and Richard Socher. Quasi-recurrent neural
networks. arXiv preprint arXiv:1611.01576, 2016.
[5] Lai-wan Chan and Fung-yu Young. Ring-structured recurrent neural network. In World Congress
on Neural Networks, pages 328–331, 1993.
[6] Gal Chechik, Isaac Meilijson, and Eytan Ruppin. Synaptic pruning in development: A
computational account. Neural Computation, 10(7):1759–1777, 1998. doi: 10.1162/
089976698300017124. URL https://doi.org/10.1162/089976698300017124.
[7] Danny Hernandez Dario Amodei. Ai and compute, 2018. URL https://openai.com/blog/
ai-and-compute/.
[8] Thomas Demeester, Johannes Deleu, Fréderic Godin, and Chris Develder. Predefined sparseness
in recurrent sequence models. CoRR, abs/1808.08720, 2018.
[9] John S Garofolo, Lori F Lamel, William M Fisher, Jonathan G Fiscus, and David S Pallett.
Darpa timit acoustic-phonetic continous speech corpus cd-rom. nist speech disc 1-1.1. NASA
STI/Recon technical report n, 93, 1993.
[10] Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N Dauphin. Convolutional
sequence to sequence learning. In Proceedings of the 34th International Conference on Machine
Learning-Volume 70, pages 1243–1252. JMLR. org, 2017.
[11] Scott Gray, Alec Radford, and Diederik P Kingma. Gpu kernels for block-sparse weights.
Technical report, Technical report, OpenAI, 2017.
[12] Jinwei Gu, Xiaodong Yang, Shalini De Mello, and Jan Kautz. Dynamic facial analysis: From
bayesian filtering to recurrent neural network. In IEEE Conference on Computer Vision and
Pattern Recognition, 2017.
[13] Song Han, Huizi Mao, and William J Dally. Deep compression: Compressing deep neural networks with pruning, trained quantization and huffman coding. arXiv preprint arXiv:1510.00149,
2015.
[14] Song Han, Huizi Mao, and William J Dally. Deep compression: Compressing deep neural networks with pruning, trained quantization and huffman coding. arXiv preprint arXiv:1510.00149,
2015.
[15] Song Han, Jeff Pool, John Tran, and William Dally. Learning both weights and connections
for efficient neural network. In Advances in neural information processing systems, pages
1135–1143, 2015.
[16] K He, X Zhang, S Ren, and J Sun. Deep residual learning for image recognition. In CVPR,
2016.
[17] X. D. Ji and B. O. Familoni. A diagonal recurrent neural network-based hybrid direct adaptive
spsa control system. IEEE Transactions on Automatic Control, 44(7):1469–1473, July 1999.
ISSN 0018-9286. doi: 10.1109/9.774125.
9

[18] Nal Kalchbrenner, Erich Elsen, Karen Simonyan, Seb Noury, Norman Casagrande, Edward
Lockhart, Florian Stimberg, Aäron van den Oord, Sander Dieleman, and Koray Kavukcuoglu.
Efficient neural audio synthesis. CoRR, abs/1802.08435, 2018. URL http://arxiv.org/
abs/1802.08435.
[19] Chao-Chee Ku and Kwang Y Lee. Diagonal recurrent neural networks for dynamic systems
control. IEEE transactions on neural networks, 6(1):144–156, 1995.
[20] Oleksii Kuchaiev and Boris Ginsburg. Factorization tricks for LSTM networks. CoRR,
abs/1703.10722, 2017. URL http://arxiv.org/abs/1703.10722.
[21] K-F Lee and H-W Hon. Speaker-independent phone recognition using hidden markov models.
IEEE Transactions on Acoustics, Speech, and Signal Processing, 37(11):1641–1648, 1989.
[22] Shuai Li, Wanqing Li, Chris Cook, Ce Zhu, and Yanbo Gao. Independently recurrent neural
network (indrnn): Building A longer and deeper RNN. CoRR, abs/1803.04831, 2018. URL
http://arxiv.org/abs/1803.04831.
[23] Mitchell Marcus, Beatrice Santorini, and Mary Ann Marcinkiewicz. Building a large annotated
corpus of english: The Penn Treebank. COMPUTATIONAL LINGUISTICS, 19(2):313–330,
1993.
[24] Stephen Merity, Nitish Shirish Keskar, and Richard Socher. Regularizing and optimizing
LSTM language models. CoRR, abs/1708.02182, 2017. URL http://arxiv.org/abs/1708.
02182.
[25] Stephen Merity, Nitish Shirish Keskar, and Richard Socher. An analysis of neural language
modeling at multiple scales. CoRR, abs/1803.08240, 2018. URL http://arxiv.org/abs/
1803.08240.
[26] Tomas Mikolov, Armand Joulin, Sumit Chopra, Michaël Mathieu, and Marc’Aurelio Ranzato.
Learning longer memory in recurrent neural networks. CoRR, abs/1412.7753, 2014. URL
http://arxiv.org/abs/1412.7753.
[27] Decebal Constantin Mocanu, Elena Mocanu, Peter Stone, Phuong H Nguyen, Madeleine
Gibescu, and Antonio Liotta. Scalable training of artificial neural networks with adaptive sparse
connectivity inspired by network science. Nature communications, 9(1):2383, 2018.
[28] Sharan Narang, Eric Undersander, and Gregory Diamos. Block-sparse recurrent neural networks.
arXiv preprint arXiv:1711.02782, 2017.
[29] Tara N Sainath, Brian Kingsbury, Vikas Sindhwani, Ebru Arisoy, and Bhuvana Ramabhadran.
Low-rank matrix factorization for deep neural network training with high-dimensional output
targets. In Acoustics, Speech and Signal Processing (ICASSP), 2013 IEEE International
Conference on, pages 6655–6659. IEEE, 2013.
[30] K Simonyan and A Zisserman. Two-stream convolutional networks for action recognition in
videos. In NeurIPS, 2014.
[31] Shyamala C Sivakumar, William Robertson, and William J Phillips. Online stabilization of
block-diagonal recurrent neural networks. IEEE Transactions on Neural Networks, 10(1):
167–175, 1999.
[32] Khurram Soomro, Amir Roshan Zamir, and Mubarak Shah. Ucf101: A dataset of 101 human
actions classes from videos in the wild. arXiv preprint arXiv:1212.0402, 2012.
[33] Y Cem Subakan and Paris Smaragdis. Diagonal rnns in symbolic music modeling. In Applications of Signal Processing to Audio and Acoustics (WASPAA), 2017 IEEE Workshop on, pages
354–358. IEEE, 2017.
[34] Yu Zhang Tao Lei and Yoav Artzi. Training rnns as fast as cnns. CoRR, abs/1709.02755, 2017.
URL http://arxiv.org/abs/1709.02755.
[35] Ah Chung Tsoi and Andrew D Back. Locally recurrent globally feedforward networks: a critical
review of architectures. IEEE Transactions on Neural Networks, 5(2):229–239, 1994.
10

[36] Aäron Van Den Oord, Sander Dieleman, Heiga Zen, Karen Simonyan, Oriol Vinyals, Alex
Graves, Nal Kalchbrenner, Andrew W Senior, and Koray Kavukcuoglu. Wavenet: A generative
model for raw audio. SSW, 125, 2016.
[37] Christophe Veaux, Junichi Yamagishi, Kirsten MacDonald, et al. Cstr vctk corpus: English
multi-speaker corpus for cstr voice cloning toolkit. University of Edinburgh. The Centre for
Speech Technology Research (CSTR), 2017.
[38] Duncan J Watts and Steven H Strogatz. Collective dynamics of ‘small-world’networks. nature,
393(6684):440, 1998.
[39] Xiaodong Yang, Pavlo Molchanov, and Jan Kautz. Multilayer and multimodal fusion of deep
neural networks for video classification. In ACM Multimedia, 2016.
[40] Xiaodong Yang, Pavlo Molchanov, and Jan Kautz. Making convolutional networks recurrent
for visual sequence learning. In IEEE Conference on Computer Vision and Pattern Recognition,
2018.
[41] Xiangyu Zhang, Xinyu Zhou, Mengxiao Lin, and Jian Sun. Shufflenet: An extremely efficient
convolutional neural network for mobile devices. CoRR, abs/1707.01083, 2017. URL http:
//arxiv.org/abs/1707.01083.
[42] Danhao Zhu, Si Shen, Xin-Yu Dai, and Jiajun Chen. Going wider: Recurrent neural network with
parallel cells. CoRR, abs/1705.01346, 2017. URL http://arxiv.org/abs/1705.01346.
[43] Feiwen Zhu, Jeff Pool, Michael Andersch, Jeremy Appleyard, and Fung Xie. Sparse persistent
rnns: Squeezing large recurrent networks on-chip. CoRR, abs/1804.10223, 2018. URL http:
//arxiv.org/abs/1804.10223.

11

